// from https://github.com/piraces/guid-ts

const toHex: string[] = []; // Array to map bytes to its corresponding hex value.
for (let i = 0; i < 256; ++i) {
  toHex[i] = (i + 0x100).toString(16).substring(1);
}

export default class Guid {
  private static readonly patternV4 =
    /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[4][0-9a-fA-F]{3}-[89ab][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/i; // RegEx to validate v4 UUIDs.
  private static readonly emptyStr = "00000000-0000-0000-0000-000000000000"; // Represents an empty formatted GUID.
  private static readonly MAX_UINT_8 = 255; // Max value of an unsigned 8-bit integer.

  private contentStr?: string; // Internal Guid value represented as a string.
  private contentInt?: number; // Internal Guid value represented as a number.
  private readonly DASH = "-"; // Separator for the formatting of the GUID.
  private readonly DASH_REGEXP = /-/g; // Regex to match GUID separator.

  /**
   * Creates a new Guid object using a string, if no string is provided (or the string is not valid),
   * the Guid value will be initialized with all zeroes (empty Guid).
   *
   * @param str is the string to use to initialize the Guid object. If its not valid an empty GUID string will be used.
   */
  constructor(str?: string) {
    this.contentStr = str;
    this.contentInt = this.getNumberFromGuidString();
    if (!this.isValid()) {
      this.contentStr = Guid.emptyStr;
      this.contentInt = -1;
    }
  }

  /**
   * Returns a new Guid object with an all zeroes internal value.
   *
   * @returns new Guid object with an internal value with all zeroes (an empty GUID, non valid).
   */
  public static empty() {
    return new Guid();
  }

  /**
   * Returns a Guid object with a random valid UUID v4 value.
   * The method allows the use of a custom random value generator that implements the Crypto API.
   * The internal guid value is generated using the provided generator (if any), if not provided, it attempts
   * to generate random values from the Crypto API of the browser. If the browser does not support the Crypto API,
   * Math.random() is used as a fallback to generate random values.
   *
   * @param generator? - Custom random values generator that implements the Crypto API.
   * @returns A new Guid object with a valid random value generated by the provided generator or the defaults.
   */
  public static newGuid(generator?: Crypto): Guid {
    return new Guid(this.generate(generator));
  }

  /**
   * Checks if a string represents a valid v4 GUID.
   *
   * @returns true if its a valid v4 GUID value represented as string.
   */
  public static isValid(str: string): boolean {
    if (str) {
      return Guid.patternV4.test(str);
    }
    return false;
  }

  /**
   * Checks if the current internal value is a valid v4 GUID.
   *
   * @returns true if its a valid v4 GUID value.
   */
  public isValid(): boolean {
    if (this.contentStr) {
      return Guid.patternV4.test(this.contentStr);
    }
    return false;
  }

  /**
   * Checks if the current internal value is empty (all zeroes value).
   *
   * @returns true if the object has an empty value.
   */
  public isEmpty(): boolean {
    return this.contentStr === Guid.emptyStr;
  }

  /**
   * Checks if the current Guid object is equal to the provided one.
   *
   * @param otherGuid represents the Guid object to compare to this one.
   * @returns true if this object value is equal to the provided one.
   */
  public equals(otherGuid: Guid): boolean {
    return (
      otherGuid &&
      !!this.contentStr &&
      otherGuid.toString().toLowerCase() === this.contentStr.toLowerCase()
    );
  }

  /**
   * Returns the object value as string.
   *
   * @returns the string representing the Guid value.
   */
  public toString(): string {
    return this.contentStr ?? "";
  }

  /**
   * Returns the object value as number.
   *
   * @returns the hex number representing the Guid value.
   */
  public toNumber(): number {
    return this.contentInt ?? -1;
  }

  /**
   * Attempts to get the number GUID value for the current object.
   *
   * @returns the hex number representing the Guid value or -1 if its value cannot be parsed.
   */
  private getNumberFromGuidString(): number {
    if (!this.contentStr || this.contentStr.indexOf(this.DASH) === -1) {
      return -1;
    }

    return Number("0x" + this.contentStr.replace(this.DASH_REGEXP, ""));
  }

  /**
   * Generates a string with a valid GUID v4 value from a custom Crypto object or the defaults.
   *
   * @param generator? is the custom generator of values to use to generate the value.
   * @returns a valid GUID v4 value as a string.
   */
  private static generate(generator?: Crypto): string {
    const val = Guid.generateRandomBytes(generator);
    return (
      toHex[val[0]] +
      toHex[val[1]] +
      toHex[val[2]] +
      toHex[val[3]] +
      "-" +
      toHex[val[4]] +
      toHex[val[5]] +
      "-" +
      toHex[val[6]] +
      toHex[val[7]] +
      "-" +
      toHex[val[8]] +
      toHex[val[9]] +
      "-" +
      toHex[val[10]] +
      toHex[val[11]] +
      toHex[val[12]] +
      toHex[val[13]] +
      toHex[val[14]] +
      toHex[val[15]]
    );
  }

  /**
   * Generates an Uint8Array with 16 random values generated using the crypto object provided or the defaults.
   *
   * @param generator is the Crypto implementation to use instead of the defaults.
   * @returns an Uint8Array with 16 random values.
   */
  private static generateRandomBytes(generator?: Crypto): Uint8Array {
    const cryptoObj = Guid.getCryptoImplementation();
    if (typeof generator !== "undefined") {
      return Guid.getCryptoRandomBytes(generator);
    } else if (typeof cryptoObj !== "undefined") {
      return Guid.getCryptoRandomBytes(cryptoObj);
    } else {
      return Guid.getRandomBytes();
    }
  }

  /**
   * Generates an Uint8Array with 16 random values generated using the crypto object provided.
   *
   * @param crypto is the Crypto implementation to use to generate the random values to fill the array.
   * @returns an Uint8Array with 16 random values.
   */
  private static getCryptoRandomBytes(crypto: Crypto): Uint8Array {
    const val = crypto.getRandomValues<Uint8Array>(new Uint8Array(16));
    Guid.setSpecialBytesForV4Guid(val);
    return val;
  }

  /**
   * Generates an Uint8Array with 16 random values generated using the Math.random() method.
   *
   * @returns an Uint8Array with 16 random values.
   */
  private static getRandomBytes(): Uint8Array {
    let val = new Uint8Array(16);
    val = val.map(() => {
      return (Math.random() * Guid.MAX_UINT_8) | 0;
    });
    Guid.setSpecialBytesForV4Guid(val);
    return val;
  }

  /**
   * Sets the bytes of an Uint8Array to match the RFC definition of v4 GUIDs.
   *
   * @param arr is the array to be modified.
   */
  private static setSpecialBytesForV4Guid(arr: Uint8Array) {
    arr[6] = (arr[6] & 0x0f) | 0x40;
    arr[8] = (arr[8] & 0x3f) | 0x80;
  }

  /**
   * Returns the Crypto object that implements the Crypto API from the browser.
   *
   * @returns Crypto object from the browser implementation.
   */
  private static getCryptoImplementation(): Crypto | undefined {
    if (typeof window === "undefined") {
      return undefined;
    }
    // @ts-ignore: msCrypto does not exists in window (only for IE11)
    return window.crypto || window.msCrypto;
  }
}
